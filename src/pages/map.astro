---
import Base from '../layouts/Base.astro';
import ranges from '@server/config/age-groups.js';
import 'mapbox-gl/dist/mapbox-gl.css';
---

<Base>
    <div class="filter-form m-3 z-1">
        <form class="card shadow-soft p-3">
            <div id="values">
                <label>
                    <input type="checkbox" class="form-check-input" name="value"/> <span></span> <strong
                        class="badge text-bg-secondary"></strong>
                </label>
            </div>
            <div>
                <label>
                    <input type="checkbox" class="form-check-input" name="sex" value="M"/> Чоловіки <strong
                        class="badge text-bg-secondary">{Math.round(Math.random() * 100)}</strong>
                </label>
                <label>
                    <input type="checkbox" class="form-check-input" name="sex" value="F"/> Жінки <strong
                        class="badge text-bg-secondary">{Math.round(Math.random() * 100)}</strong>
                </label>
            </div>
            <div>
				{ranges.map((range) => (
                        <label>
                            <input type="checkbox" class="form-check-input" name="age"
                                   value={range.join('-')}/> {range.join(' - ')}{range.length === 1 && '+'} <strong
                                class="badge text-bg-secondary">{Math.round(Math.random() * 100)}</strong>
                        </label>
				))}
            </div>
            <div class="toolbar">
                <button type="submit" class="btn btn-primary">Додати</button>
            </div>
        </form>
        <label class="btn btn-light btn-sm arrow up">
            <input type="checkbox"/>
        </label>
    </div>

    <div class="legend m-3 z-3">
        <label class="btn btn-light btn-sm arrow right">
            <input type="checkbox"/>
        </label>
        <ul id="legend" class="list-group">
            <li class="list-group-item">
                <label class="d-flex align-items-center gap-3">
                    <input type="checkbox" class="form-check-input mt-0" checked/> <span></span>
                    <button type="button" class="btn btn-close btn-sm"></button>
                </label>
            </li>
        </ul>
    </div>

    <div id="map"></div>
</Base>

<style is:inline>
	html, body, #map {
		height: 100%;
	}
</style>

<style lang="less">
	.arrow {
		display: inline-flex;
		align-items: center;
		justify-content: center;

		input {
			opacity: 0;
			width: 1px;
			height: 1px;
		}
	}

	.filter-form {
		position: fixed;
		top: 0;
		left: 0;

		&:has(.arrow input:checked) {
			form {
				display: none;
			}

			.arrow::before {
				transform: rotate(180deg);
			}
		}

		form {
			display: grid;
			grid-template-columns: auto auto auto;
			gap: 20px;

			label {
				display: block;
				margin-bottom: 4px;
				cursor: pointer;
			}
		}

		.toolbar {
			grid-column: span 3;
		}
	}

	.legend {
		position: fixed;
		right: 0;
		bottom: 0;

		display: flex;
		align-items: flex-end;

		&:has(.arrow input:checked) {
			ul {
				display: none;
			}

			.arrow::before {
				transform: rotate(180deg);
			}
		}
	}
</style>

<script>
	import {PUBLIC_MAP_TOKEN, MAP_CENTER} from "astro:env/client";
	import ajax from '../lib/ajax.js';
	import {getValues, qs, each} from '../lib/dom';
	import {error} from '../lib/notify';
	import {createMap, buildGeoJSON, updateMapData} from '../lib/map';

	const map = createMap('map');

	const params = new URLSearchParams(location.search);
	const poll_id = params.get('poll')!;

	type Answer = {
		value: string,
		count: number,
	};

	const answers = each<Answer>('#values', function ({value, count}, q) {
		q<HTMLInputElement>('input').value = value;
		q('span').innerText = value;
		q('strong').innerText = String(count);
	});

	type Filter = {
		poll_id: string,
		values: string[],
		sex: string[],
		age: Array<number[]>,
		active?: boolean,
	};

	const filters: Filter[] = [];

	const legend = each<Filter>('#legend', function (item, q) {
		const {values, sex, age} = item;

		q('span').innerText = (
			[
				values,
				sex.map(s => s === 'F' ? 'Жінки' : 'Чоловіки'),
				age.map(range => range.join('-')),
			]
			.map(list => list.join(', '))
			.filter(v => !!v.trim())
			.join('; ')
		) || 'Усі відповіді';

		q('button').addEventListener('click', function () {
			filters.splice(filters.indexOf(item), 1);
			legend.remove(item);
			updateMap();
		});

		q('input').addEventListener('change', function (e) {
			const inp = e.target as HTMLInputElement;
			item.active = inp.checked;
			updateMap();
		});
	});

	await updateAnswers();

	qs('form').addEventListener('change', function () {
		updateCounts()
		.catch(err => error(err.message || 'Server error'));
	});

	qs('form').addEventListener('submit', function (e) {
		e.preventDefault();

		const item = getFilter();

		item.active = true;

		filters.push(item);
		legend.add(item);

		updateMap();
	});

	await updateCounts();

	function getFilter(): Filter {
		const values = getValues('[name="value"]:checked');
		const sex = getValues('[name="sex"]:checked');
		const age = getValues('[name="age"]:checked').map(range => range.split('-').map(v => Number(v)));

		return {
			poll_id,
			values,
			sex,
			age,
		};
	}

	async function updateAnswers() {
		const list: Answer[] = await ajax('/api/map/answers', {poll_id});

		answers.reset(list);
	}

	async function updateCounts() {
		type Counts = {
			value: { [value: string]: number },
			sex: { [value: string]: number },
			age: { [value: string]: number },
		};

		const counts: Counts = await ajax('/api/map/counts', getFilter());

		for (const name in counts) {
			for (const [value, count] of Object.entries(counts[name])) {
				const label = qs(`label:has(input[name="${name}"][value="${value}"])`);
				label.classList.toggle('opacity-50', count === 0);
				label.querySelector('strong')!.innerText = String(count);
			}
		}
	}

	async function updateMap() {
		const list = await ajax('/api/map/geo', filters.filter(item => item.active));

		updateMapData(map, buildGeoJSON([].concat(...list)));
	}
</script>