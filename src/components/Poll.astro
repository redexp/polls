---
import {render} from "astro:content";
import {basename} from 'node:path';
import type {Poll} from '../lib/polls';
import '../styles/poll.less';

interface Props {
	poll: Poll,
	extractTitle?: boolean,
}

const {poll, extractTitle} = Astro.props;
const {Content, headings} = await render(poll);

const pub = !!poll.data.public;
const active = !poll.data.expire || poll.data.expire > new Date();

const json = {
	public: pub,
	expire: poll.data.expire,
	optional: poll.data.optional,
};
---

{!!(extractTitle && headings.length > 0) &&
<h2 class="display-5 text-center my-5">{headings[0].text}</h2>}

<form
	id={basename(poll.id)}
	class="poll card shadow-soft p-3 mt-5"
	class:list={{
		titleless: extractTitle,
		disabled: !active,
		public: pub,
	}}
>
    <script type="text/json" set:html={JSON.stringify(json)}> </script>

	<p class="d-flex gap-1">
		<a
			data-active-badge
			href="/faq/#types"
			class="badge"
			class:list={{
				"text-bg-success": active,
				"text-bg-secondary": !active,
			}}
			title={active ? 'Ви можете прийняти в ньому участь' : ''}
		>{active ? 'Активне' : 'Завершилось'}</a>

		<a
            href="/faq/#types"
			class="badge"
			class:list={{
				"text-bg-success": pub,
				"text-bg-secondary": !pub,
			}}
			title={pub ? 'Ваше імʼя буде видно під цим опитуванням' : 'Вашого імені не буде видно під цим опитуванням'}
		>{pub ? 'Публічне' : 'Анонімне'}</a>
	</p>

    <Content/>

	{active &&
	<div class="toolbar">
        <button type="submit" class="btn btn-primary">Надіслати відповіді</button>

        <div data-success-notify class="alert alert-success mb-0 mt-3 d-none"></div>
    </div>}
</form>

<script>
	import {qsAll} from '@lib/dom.ts';
	import answerConfirm, {
		createSuccessText,
		getPollData,
		sendAnswer,
		tryRestorePendingAnswer
	} from '@lib/answerConfirm.ts';
	import {getAuthParams, retrieveJwt} from "@lib/auth.ts";
	import {showInfoModal} from "@lib/modal.ts";
	import {getInputsGroups} from "@lib/answerConfirm.ts";

	for (const form of qsAll<HTMLFormElement>('form')) {
		form.addEventListener('submit', onSubmit);
		form.addEventListener('change', onChange);

		const {active, public: pub} = getPollData(form);

		form.classList.toggle('public', pub);
		form.classList.toggle('disabled', !active);

		const badge = form.querySelector('[data-active-badge]')! as HTMLSpanElement;
		badge.innerText = active ? 'Активне' : 'Завершилось';
		badge.classList.toggle('text-bg-success', active);
		badge.classList.toggle('text-bg-secondary', !active);
	}

	;(async () => {
		const {auth_token, state} = getAuthParams();

		if (auth_token) {
			await retrieveJwt(auth_token);
		}

		if (!state) return;

		const form = await tryRestorePendingAnswer(state);

		if (!form) return;

		const info = showInfoModal(createSuccessText(form), {size: 'default', html: true});

		info.loading(sendAnswer(form));

		setAnswered(form);
	})()
	.catch(err => console.error(err));

	async function onSubmit(e: Event) {
		e.preventDefault();

		const form = e.target as HTMLFormElement;

		const confirmed = await answerConfirm(form);
		const noty = form.querySelector<HTMLDivElement>('[data-success-notify]')!;

		noty.classList.remove('d-none');

		if (confirmed) {
			noty.innerHTML = createSuccessText(form);
			setAnswered(form);
		}
		else {
			noty.innerText = 'Дякуємо за увагу! Сподіваємося, Вас зацікавлять наступні опитування!';
		}

		noty.scrollIntoView({
			behavior: 'smooth',
			block: 'center',
		});
	}

	function onChange(e: Event) {
		const form = e.currentTarget as HTMLFormElement;
		const input = e.target as HTMLInputElement;
		const groups = getInputsGroups(form);
		const group = groups.get(input.dataset.group!)!;
		const {max} = group;
		const invalid = 'is-invalid';

		if (group.checkedCount <= 1 && group.inputs[0].classList.contains(invalid)) {
			for (const inp of group.inputs) {
				inp.classList.remove(invalid);
			}
		}

		if (max) {
			const count = group.checkedCount;

			if (input.checked) {
				input.classList.toggle(invalid, count > max);
			}
			else if (count <= max) {
				for (const inp of group.inputs) {
					inp.classList.remove(invalid);
				}
			}
		}
	}

	function setAnswered(form: HTMLFormElement) {
		const btn = form.querySelector<HTMLButtonElement>('button[type="submit"]');

		if (btn) {
			btn.innerText = 'Змінити відповіді';
		}
	}
</script>